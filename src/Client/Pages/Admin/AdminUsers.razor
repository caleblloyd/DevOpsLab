@page "/admin/users"

@using DevOpsLab.Client.Components.Datagrid
@using DevOpsLab.Shared.Collections
@using DevOpsLab.Shared.Filter
@using DevOpsLab.Shared.Sort
@using DevOpsLab.Shared.ViewModels
@using Microsoft.AspNetCore.SignalR.Client
@using DevOpsLab.Client.Components

@inherits AdminBase

<h1>Users</h1>

<Datagrid FetchAsync="@FetchAsync" Paginate="true">
    <HeaderCells>
        <DatagridHeaderCell Text="Name"/>
        <DatagridHeaderCell>
            <DatagridHeaderSort
                Text="Email"
                SortParam="@_sortParam"
                SortAsc="@AppUserSort.EmailAsc"
                SortDesc="@AppUserSort.EmailDesc"/>
            <DatagridHeaderFilterString
                OnChange="@(value => _filter.Email = value)"/>
        </DatagridHeaderCell>
        <DatagridHeaderCell Text="Role" Separator="false"/>
    </HeaderCells>
    <RowActionsTemplate/>
    <RowCellsTemplate>
        <DatagridCell>@context.Name</DatagridCell>
        <DatagridCell>@context.Email</DatagridCell>
        <DatagridCell>@context.Role</DatagridCell>
    </RowCellsTemplate>
</Datagrid>

@code{
    private readonly AppUserFilter _filter = new AppUserFilter();

    private readonly SortParam<AppUserSort> _sortParam = new SortParam<AppUserSort>();

    private async Task<ListResponse<AppUserVM>> FetchAsync(Paginate paginate)
    {
        await AdminHubClient.WaitConnectedAsync();
        ListResponse<AppUserVM> listResponse = null;
        await foreach (var response in AdminHubClient.HubConnection
            .StreamAsync<ListResponse<AppUserVM>>(
                "UserList",
                _filter,
                _sortParam.Value,
                paginate
            ))
        {
            listResponse = response;
        }
        return listResponse;
    }

}
