@page "/admin/users"

@using DevOpsLab.Client.Components
@using DevOpsLab.Client.Components.Datagrid
@using DevOpsLab.Client.Components.Modal
@using DevOpsLab.Client.Helpers
@using DevOpsLab.Shared.Collections
@using DevOpsLab.Shared.Filter
@using DevOpsLab.Shared.Sort
@using DevOpsLab.Shared.ViewModels
@using Microsoft.AspNetCore.SignalR.Client

@inherits AdminBase

<h1>Users</h1>

<Datagrid @ref="_datagrid" FetchAsync="@FetchAsync" Paginate="true">
    <HeaderCells>
        <DatagridHeaderCell Text="Name"/>
        <DatagridHeaderCell>
            <DatagridHeaderSort
                Text="Email"
                SortParam="@_sortParam"
                SortAsc="@AppUserSort.EmailAsc"
                SortDesc="@AppUserSort.EmailDesc"/>
            <DatagridHeaderFilterString
                OnChange="@(value => _filter.Email = value)"/>
        </DatagridHeaderCell>
        <DatagridHeaderCell Text="Role" Separator="false"/>
    </HeaderCells>
    <RowActionsTemplate/>
    <RowActionsTemplate>
        <DropdownLink ActionAsync="@(() => EditOpenAsync(context))">Edit</DropdownLink>
        <DropdownLink ActionAsync="@(() => DeleteOpenAsync(context))">Delete</DropdownLink>
    </RowActionsTemplate>
    <RowCellsTemplate>
        <DatagridCell>@context.Name</DatagridCell>
        <DatagridCell>@context.Email</DatagridCell>
        <DatagridCell>@context.Role</DatagridCell>
    </RowCellsTemplate>
</Datagrid>

<ModalForm
    @ref="_modalEdit"
     HeaderText="Edit User"
     Size="@ModalSize.Large"
     EditFormModelFn="@(() => (object) _activeModel)"
     AfterCancel="@AfterCancel"
     BeforeSubmitAsync="@EditAsync"
     AfterSubmitAsync="@AfterSubmitAsync">
    <div class="clr-form-control">
        <label for="name" class="clr-control-label">Name</label>
        <div class="clr-control-container">
            <div class="clr-input-wrapper">
                <InputText id="name" placeholder="Name" class="clr-input" @bind-Value="_activeModel.Name"/>
            </div>
        </div>
    </div>
</ModalForm>

<ModalForm
    @ref="_modalDelete"
     HeaderText="Delete User"
     SubmitButtonClass="btn-danger"
     SubmitButtonText="Delete"
     AfterCancel="@AfterCancel"
     BeforeSubmitAsync="@DeleteAsync"
     AfterSubmitAsync="@AfterSubmitAsync">
    <p>Delete user <strong>@_activeModel.Email</strong>?</p>
</ModalForm>

@code{
    private AppUserVM _activeModel;

    private Datagrid<AppUserVM> _datagrid;

    private ModalForm _modalEdit;

    private ModalForm _modalDelete;

    private readonly AppUserFilter _filter = new AppUserFilter();

    private readonly WrapParam<AppUserSort> _sortParam = new WrapParam<AppUserSort>();

    private async Task<ListResponse<AppUserVM>> FetchAsync(Paginate paginate)
    {
        await AdminHubClient.WaitConnectedAsync();
        ListResponse<AppUserVM> listResponse = null;
        await foreach (var response in AdminHubClient.HubConnection
            .StreamAsync<ListResponse<AppUserVM>>(
                "UserList",
                _filter,
                _sortParam.Value,
                paginate
            ))
        {
            listResponse = response;
        }
        return listResponse;
    }

    private async Task EditOpenAsync(AppUserVM context)
    {
        _activeModel = DataHelper.DeepCopy(context);
        await _modalEdit.OpenAsync();
    }

    private async Task EditAsync()
    {
        await HubHelper.WrapAsync(
            message => _modalEdit.SetAlerts(new[] {message}),
            async () =>
            {
                await foreach (var _ in AdminHubClient.HubConnection
                    .StreamAsync<bool>(
                        "UserEdit",
                        _activeModel
                    ))
                {
                }
            });
    }

    private async Task DeleteOpenAsync(AppUserVM context)
    {
        _activeModel = DataHelper.DeepCopy(context);
        await _modalDelete.OpenAsync();
    }

    private async Task DeleteAsync()
    {
        await HubHelper.WrapAsync(
            message => _modalDelete.SetAlerts(new[] {message}),
            async () =>
            {
                await foreach (var _ in AdminHubClient.HubConnection
                    .StreamAsync<bool>(
                        "UserDelete",
                        _activeModel
                    ))
                {
                }
            });
    }

    private void AfterCancel()
    {
        ResetDefaults();
    }

    private async Task AfterSubmitAsync()
    {
        ResetDefaults();
        await _datagrid.Refresh();
    }

    private void ResetDefaults()
    {
        _activeModel = default;
    }

}
