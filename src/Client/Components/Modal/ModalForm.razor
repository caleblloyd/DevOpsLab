@using DevOpsLab.Client.Components.Alert

<Modal @ref="_modal" Size="@Size" EditFormModelFn="@EditFormModelFn" EditFormValidSubmitAsync="@SubmitAsync">
    <Header>
        <button aria-label="Close" class="close" type="button" @onclick="CancelAsync">
            <clr-icon aria-hidden="true" shape="close"/>
        </button>
        <h3 class="modal-title">@HeaderText</h3>
    </Header>
    <Body>
    <AlertDanger Alerts="@_alerts"/>
    @if (EditFormModelFn() != default)
    {
        <DataAnnotationsValidator/>
        <ValidationSummary/>
    }
    @ChildContent
    </Body>
    <Footer>
        <button class="btn @CancelButtonClass" type="button" @onclick="CancelAsync">@CancelButtonText</button>
        @if (EditFormModelFn() != default)
        {
            <button class="btn @SubmitButtonClass" type="submit" form="modal-form">@SubmitButtonText</button>
        }
        else
        {
            <button class="btn @SubmitButtonClass" type="button" @onclick="SubmitAsync">@SubmitButtonText</button>
        }
    </Footer>
</Modal>

@code {

    private Modal _modal;

    private IEnumerable<string> _alerts;

    [Parameter]
    public virtual string CancelButtonClass { get; set; } = "btn-outline";

    [Parameter]
    public virtual string CancelButtonText { get; set; } = "Cancel";

    [Parameter]
    public virtual string SubmitButtonClass { get; set; } = "btn-primary";

    [Parameter]
    public virtual string SubmitButtonText { get; set; } = "Save";

    [Parameter]
    public string HeaderText { get; set; }

    [Parameter]
    public ModalSize Size { get; set; }

    [Parameter]
    public Func<object> EditFormModelFn { get; set; } = () => null;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Action BeforeCancel { get; set; }

    [Parameter]
    public Func<Task> BeforeCancelAsync { get; set; }

    [Parameter]
    public Action BeforeOpen { get; set; }

    [Parameter]
    public Func<Task> BeforeOpenAsync { get; set; }

    [Parameter]
    public Action BeforeSubmit { get; set; }

    [Parameter]
    public Func<Task> BeforeSubmitAsync { get; set; }

    [Parameter]
    public Action AfterCancel { get; set; }

    [Parameter]
    public Func<Task> AfterCancelAsync { get; set; }

    [Parameter]
    public Action AfterOpen { get; set; }

    [Parameter]
    public Func<Task> AfterOpenAsync { get; set; }

    [Parameter]
    public Action AfterSubmit { get; set; }

    [Parameter]
    public Func<Task> AfterSubmitAsync { get; set; }

    public async Task CancelAsync()
    {
        if (BeforeCancel != default)
        {
            BeforeCancel();
        }
        else if (BeforeCancelAsync != default)
        {
            await BeforeCancelAsync();
        }
        _modal.Close();
        ClearAlerts();
        if (AfterCancel != default)
        {
            AfterCancel();
        }
        else if (AfterCancelAsync != default)
        {
            await AfterCancelAsync();
        }
    }

    public async Task OpenAsync()
    {
        if (BeforeOpen != default)
        {
            BeforeOpen();
        }
        else if (BeforeOpenAsync != default)
        {
            await BeforeOpenAsync();
        }
        _modal.Open();
        if (AfterOpen != default)
        {
            AfterOpen();
        }
        else if (AfterOpenAsync != default)
        {
            await AfterOpenAsync();
        }
    }

    public async Task SubmitAsync()
    {
        ClearAlerts();
        if (BeforeSubmit != default)
        {
            BeforeSubmit();
        }
        else if (BeforeSubmitAsync != default)
        {
            await BeforeSubmitAsync();
        }
        _modal.Close();
        if (AfterSubmit != default)
        {
            AfterSubmit();
        }
        else if (AfterSubmitAsync != default)
        {
            await AfterSubmitAsync();
        }
    }

    public void SetAlerts(IEnumerable<string> alerts)
    {
        _alerts = alerts;
        StateHasChanged();
    }

    public void ClearAlerts()
    {
        if (_alerts == null) return;
        _alerts = null;
        StateHasChanged();
    }

}
