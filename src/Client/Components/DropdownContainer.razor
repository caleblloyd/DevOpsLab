@using DevOpsLab.Client.Helpers

@inject IJSRuntime JsRuntime

@implements IDisposable

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Func<Task> BeforeOpenAsync { get; set; } = NoOpTask;

    [Parameter]
    public Func<Task> AfterOpenAsync { get; set; } = NoOpTask;

    [Parameter]
    public Func<Task> BeforeCloseAsync { get; set; } = NoOpTask;

    [Parameter]
    public Func<Task> AfterCloseAsync { get; set; } = NoOpTask;

    public readonly string Id = ElementHelper.NewId();

    private DotNetObjectReference<DropdownContainer> _objRef;

    private static Task NoOpTask() => Task.CompletedTask;

    protected override void OnInitialized()
    {
        _objRef = DotNetObjectReference.Create(this);
    }

    public string DropdownOpenClass => IsOpen ? "open" : "";

    public bool IsOpen { get; private set; }

    private string Selector => $"#{Id}";

    public Task DropdownToggle() => IsOpen ? DropdownClose() : DropdownOpen();

    public async Task DropdownOpen()
    {
        await BeforeOpenAsync();
        await DropdownOpenInternal();
        StateHasChanged();
        await AfterOpenAsync();
    }

    private async Task DropdownOpenInternal()
    {
        if (!IsOpen)
        {
            await JsRuntime.InvokeVoidAsync("helpers.clickedOutsideAddListener",
                _objRef,
                nameof(DropdownClickedOff),
                Selector);
            IsOpen = true;
        }
    }

    public async Task DropdownClose()
    {
        await BeforeCloseAsync();
        await DropdownCloseInternal();
        StateHasChanged();
        await AfterCloseAsync();
    }

    private async Task DropdownCloseInternal()
    {
        if (IsOpen)
        {
            await JsRuntime.InvokeVoidAsync(
                "helpers.clickedOutsideRemoveListener",
                Selector);
            IsOpen = false;
        }
    }

    [JSInvokable]
    public async Task DropdownClickedOff()
    {
        await DropdownClose();
    }

    public void Dispose()
    {
        if (_objRef != null)
        {
#pragma warning disable 4014
            DropdownCloseInternal().ContinueWith(_ =>
            {
                _objRef.Dispose();
                _objRef = null;
            });
#pragma warning restore 4014
        }
    }

}
