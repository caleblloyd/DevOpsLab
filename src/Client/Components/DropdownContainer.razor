@using DevOpsLab.Client.Helpers

@inject IJSRuntime JsRuntime

@implements IDisposable

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public readonly string Id = ElementHelper.NewId();
    public string DropdownOpenClass => _isOpen ? "open" : "";

    private bool _isOpen;
    private DotNetObjectReference<DropdownContainer> _objRef;
    private string Selector => $"#{Id}";

    protected override void OnInitialized()
    {
        _objRef = DotNetObjectReference.Create(this);
    }

    public Task DropdownToggle() => _isOpen ? DropdownClose() : DropdownOpen();

    public async Task DropdownOpen()
    {
        if (!_isOpen)
        {
            await JsRuntime.InvokeVoidAsync("helpers.clickedOutsideAddListener",
                _objRef,
                nameof(DropdownClickedOff),
                Selector);
            _isOpen = true;
        }
    }

    public async Task DropdownClose()
    {
        if (_isOpen)
        {
            await JsRuntime.InvokeVoidAsync(
                "helpers.clickedOutsideRemoveListener",
                Selector);
            _isOpen = false;
        }
    }

    [JSInvokable]
    public async Task DropdownClickedOff()
    {
        await DropdownClose();
        StateHasChanged();
    }

    public void Dispose()
    {
        if (_objRef != null)
        {
#pragma warning disable 4014
            DropdownClose();
#pragma warning restore 4014
            _objRef.Dispose();
        }
    }

}
