@using DevOpsLab.Shared.Collections

@typeparam TItem

<CascadingValue TValue="Func<Task>" Name="Refresh" Value="@Refresh">
    <CascadingValue Name="Loading" Value="@Loading">
        <clr-datagrid class="datagrid-host" style="@StyleHeight">
            <div class="datagrid-outer-wrapper">
                <div class="datagrid-inner-wrapper">
                    <div class="datagrid">
                        <div class="datagrid-table-wrapper">
                            <div role="grid" class="datagrid-table">
                                <DatagridHeaderRow HasActions="@(RowActionsTemplate != default)">
                                    @HeaderCells
                                </DatagridHeaderRow>
                                @if (_listResponse == null)
                                {
                                    <DatagridRow>
                                        <Cells>
                                            <DatagridCell>
                                                Loading...
                                            </DatagridCell>
                                        </Cells>
                                    </DatagridRow>
                                }
                                else if (!_listResponse.Items.Any())
                                {
                                    <DatagridRow>
                                        <Cells>
                                            <DatagridCell>
                                                No Results
                                            </DatagridCell>
                                        </Cells>
                                    </DatagridRow>
                                }
                                else
                                {
                                    foreach (var item in _listResponse.Items)
                                    {
                                        if (RowActionsTemplate != default)
                                        {
                                            <DatagridRow>
                                                <Actions>
                                                    @RowActionsTemplate(item)
                                                </Actions>
                                                <Cells>
                                                    @RowCellsTemplate(item)
                                                </Cells>
                                            </DatagridRow>
                                        }
                                        else
                                        {
                                            <DatagridRow>
                                                <Cells>
                                                    @RowCellsTemplate(item)
                                                </Cells>
                                            </DatagridRow>
                                        }
                                    }
                                }
                                <clr-dg-placeholder class="datagrid-placeholder-container">
                                    <div class="datagrid-placeholder"/>
                                </clr-dg-placeholder>
                            </div>
                        </div>
                    </div>
                    @if (_listResponse != null && _paginate != null)
                    {
                        <DatagridFooter
                            ItemCount="@_listResponse.Items.Count()"
                            Paginate="@_paginate"
                            Total="@_listResponse.Total"/>
                    }
                </div>
            </div>
        </clr-datagrid>
    </CascadingValue>
</CascadingValue>

@code
{
    private ListResponse<TItem> _listResponse;

    public bool Loading { get; private set; } = true;

    private Paginate _paginate;

    [Parameter]
    public Func<Paginate, Task<ListResponse<TItem>>> FetchAsync { get; set; }

    [Parameter]
    public RenderFragment HeaderCells { get; set; }

    [Parameter]
    public RenderFragment<TItem> RowActionsTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem> RowCellsTemplate { get; set; }

    [Parameter]
    public bool Paginate { get; set; } = false;

    [Parameter]
    public string StyleHeight { get; set; } = "min-height: 240px";

    protected override async Task OnParametersSetAsync()
    {
        _paginate = new Paginate();
        if (Paginate)
        {
            _paginate.Limit = 10;
        }
        await Refresh();
    }

    public async Task Refresh()
    {
        Loading = true;
        StateHasChanged();
        _listResponse = await FetchAsync(_paginate);
        Loading = false;
        StateHasChanged();
    }
}
