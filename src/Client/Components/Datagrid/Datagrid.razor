@using DevOpsLab.Shared.Collections

@typeparam TItem

<CascadingValue TValue="Func<Task>" Name="Refresh" Value="@Refresh">
    <CascadingValue Name="Loading" Value="@Loading">
        <div class="datagrid-outer-wrapper">
            <div class="datagrid-inner-wrapper">
                <div class="datagrid">
                    <div class="datagrid-table-wrapper">
                        <div role="grid" class="datagrid-table">
                            <DatagridHeaderRow>
                                @Header
                            </DatagridHeaderRow>
                            @if (_listResponse == null)
                            {
                                <DatagridRow>
                                    <DatagridCell>
                                        Loading...
                                    </DatagridCell>
                                </DatagridRow>
                            }
                            else if (!_listResponse.Items.Any())
                            {
                                <DatagridRow>
                                    <DatagridCell>
                                        No Results
                                    </DatagridCell>
                                </DatagridRow>
                            }
                            else
                            {
                                foreach (var item in _listResponse.Items)
                                {
                                    <DatagridRow>
                                        @ItemTemplate(item)
                                    </DatagridRow>
                                }
                            }
                        </div>
                    </div>
                </div>
                @if (_listResponse != null && _paginate != null)
                {
                    <DatagridFooter
                        ItemCount="@_listResponse.Items.Count()"
                        Paginate="@_paginate"
                        Total="@_listResponse.Total"/>
                }
            </div>
        </div>
    </CascadingValue>
</CascadingValue>

@code
{
    private ListResponse<TItem> _listResponse;

    public bool Loading { get; private set; } = true;

    private Paginate _paginate;

    [Parameter]
    public Func<Paginate, Task<ListResponse<TItem>>> Fetch { get; set; }

    [Parameter]
    public RenderFragment Header { get; set; }

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    public bool Paginate { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        _paginate = new Paginate();
        if (Paginate)
        {
            _paginate.Limit = 10;
        }
        await Refresh();
    }

    public async Task Refresh()
    {
        Loading = true;
        StateHasChanged();
        _listResponse = await Fetch(_paginate);
        Loading = false;
        StateHasChanged();
    }
}
