@using DevOpsLab.Shared.Collections

@typeparam TItem

<div class="datagrid-outer-wrapper">
    <div class="datagrid-inner-wrapper">
        <div class="datagrid">
            <div class="datagrid-table-wrapper">
                <div role="grid" class="datagrid-table">
                    <DatagridHeaderRow>
                        @Header
                    </DatagridHeaderRow>
                    @if (_listResponse == null)
                    {
                        <DatagridRow>
                            <DatagridCell>
                                Loading...
                            </DatagridCell>
                        </DatagridRow>
                    }
                    else if (!_listResponse.Items.Any())
                    {
                        <DatagridRow>
                            <DatagridCell>
                                No Results
                            </DatagridCell>
                        </DatagridRow>
                    }
                    else
                    {
                        foreach (var item in _listResponse.Items)
                        {
                            <DatagridRow>
                                @ItemTemplate(item)
                            </DatagridRow>
                        }
                    }
                </div>
            </div>
        </div>
        @if (_listResponse != null && _paginate != null)
        {
            <DatagridFooter
                ItemCount="@_listResponse.Items.Count()"
                Loading="@_loading"
                Paginate="@_paginate"
                Refresh="@Refresh"
                Total="@_listResponse.Total"/>
        }
    </div>
</div>

@code
{
    private ListResponse<TItem> _listResponse;

    private bool _loading = true;

    private Paginate _paginate;

    [Parameter]
    public Func<Paginate, Task<ListResponse<TItem>>> Fetch { get; set; }

    [Parameter]
    public RenderFragment Header { get; set; }

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    public bool Paginate { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        _paginate = new Paginate();
        if (Paginate)
        {
            _paginate.Limit = 10;
        }
        await Refresh();
    }

    public async Task Refresh()
    {
        _loading = true;
        StateHasChanged();
        _listResponse = await Fetch(_paginate);
        _loading = false;
        StateHasChanged();
    }
}
