@using DevOpsLab.Shared
@using DevOpsLab.Client.Helpers

@inject NavigationManager NavigationManager

<AuthorizeView Policy="@PolicyTypes.RequireInstructor">
    <Authorized>
        <a class="nav-link @TrainActiveClass" href="train">Train</a>
        <a class="nav-link @InstructActiveClass" href="instruct">Instruct</a>
    </Authorized>
</AuthorizeView>

<AuthorizeView Policy="@PolicyTypes.RequireAdmin">
    <Authorized>
        <a class="nav-link @AdminActiveClass" href="admin/courses">Admin</a>
    </Authorized>
</AuthorizeView>

@code {
    private Tuple<string, string, string> _locationState;

    private string TrainActiveClass =>
        NavigationManager.PathActiveClass(PathHelper.TrainPath);

    private string InstructActiveClass =>
        NavigationManager.PathActiveClass(PathHelper.InstructPath);

    private string AdminActiveClass =>
        NavigationManager.PathActiveClass(PathHelper.AdminPath);

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;
        LocationChangedInternal();
    }

    private void LocationChanged(object sender, LocationChangedEventArgs locationChanged)
    {
        LocationChangedInternal();
    }

    private void LocationChangedInternal()
    {
        var locationState = new Tuple<string, string, string>(TrainActiveClass, InstructActiveClass, AdminActiveClass);
        if (_locationState == null || !locationState.Equals(_locationState))
        {
            StateHasChanged();
        }
        _locationState = locationState;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
    }

}
